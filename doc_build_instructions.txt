Preliminary:
First install the NeuronPy egg:
$ python setup.py install

Then you can build the docs:
$ cd doc
$ make html

or in pdf format, if you have a latex compiler
$ make latexpdf

If you want to completely rebuild the configurationfiles, from the neuronpy 
directory, execute the following line and set parameters for the conf.py file 
that Sphinx uses to build its documentation.

sphinx-quickstart 

======================
Welcome to the Sphinx quickstart utility.

Please enter values for the following settings (just press Enter to
accept a default value, if one is given in brackets).

Enter the root path for documentation.
> Root path for the documentation [.]: doc

You have two options for placing the build directory for Sphinx output.
Either, you use a directory "_build" within the root path, or you separate
"source" and "build" directories within the root path.
> Separate source and build directories (y/N) [n]: y

Inside the root directory, two more directories will be created; "_templates"
for custom HTML templates and "_static" for custom stylesheets and other static
files. You can enter another prefix (such as ".") to replace the underscore.
> Name prefix for templates and static dir [_]: 

The project name will occur in several places in the built documentation.
> Project name: neuronpy
> Author name(s): Thomas McTavish

Sphinx has the notion of a "version" and a "release" for the
software. Each version can have multiple releases. For example, for
Python the version is something like 2.5 or 3.0, while the release is
something like 2.5.1 or 3.0a1.  If you don't need this dual structure,
just set both to the same value.
> Project version: 0.1.1
> Project release [0.1.1]: 

The file name suffix for source files. Commonly, this is either ".txt"
or ".rst".  Only files with this suffix are considered documents.
> Source file suffix [.rst]: 

One document is special in that it is considered the top node of the
"contents tree", that is, it is the root of the hierarchical structure
of the documents. Normally, this is "index", but if your "index"
document is a custom template, you can also set this to another filename.
> Name of your master document (without suffix) [index]: 

Please indicate if you want to use one of the following Sphinx extensions:
> autodoc: automatically insert docstrings from modules (y/N) [n]: y
> doctest: automatically test code snippets in doctest blocks (y/N) [n]: y
> intersphinx: link between Sphinx documentation of different projects (y/N) [n]: n
> todo: write "todo" entries that can be shown or hidden on build (y/N) [n]: n
> coverage: checks for documentation coverage (y/N) [n]: y
> pngmath: include math, rendered as PNG images (y/N) [n]: y
> jsmath: include math, rendered in the browser by JSMath (y/N) [n]: n
> ifconfig: conditional inclusion of content based on config values (y/N) [n]: n

A Makefile and a Windows command file can be generated for you so that you
only have to run e.g. `make html' instead of invoking sphinx-build
directly.
> Create Makefile? (Y/n) [y]: 
> Create Windows command file? (Y/n) [y]: n
=====================

Edit conf.py:
modindex_common_prefix = ['neuronpy.', 'neuronpy.graphics.', 'neuronpy.math.', \
'neuronpy.util.']

The following files are hand-crafted:
index.rst
about.rst
api.rst

The remaining are auto-generated by running
python auto_ref_builder.py

To build an interactive, "live" html version such that source code blocks can 
be run on the sage server, any code examples need to be prepended with '>>> ' 
and parsed through an interactive console lexer. The following method translates 
all code blocks into interactive ones. Make sure the 
site-packages/sphinx/sphinx/highlighting.py file contains

        try:
            if self.dest == 'html':
		make_interactive = True # Setting to False yields default typesetting behavior
		if make_interactive:
          	    # Add '>>> ' and '... ' as appropriate if really want interactive mode.
                    source_copy = ''
                    line_count = 0
                    for line in source.splitlines():
                        if line.startswith('>>> '):
                            if line_count == 0:
                                # Cell begins in interactive mode, and may contain 
                                # output statements that we do not want to classify 
                                # as code. Therefore, copy the source and exit loop
                                source_copy = source
                                break
                        else:
                            # Check to see if we are indented
                            line_len = len(line)
                            source_len = len(line.lstrip())
                            if line_len != source_len:
                                source_copy = source_copy + '... '
                            else:
                                source_copy = source_copy + '>>> '
                        source_copy = source_copy + line + '\n'
                        line_count += 1
                source = source_copy
                return highlight(source, lexer, self.fmter[bool(linenos)])
            else:
                hlsource = highlight(source, lexer, self.fmter[bool(linenos)])
                return hlsource.translate(tex_hl_escape_map)
        except ErrorToken:
            # this is most probably not the selected language,
            # so let it pass unhighlighted
            return self.unhighlighted(source)


From there, you can call 'make html' from the doc directory.
